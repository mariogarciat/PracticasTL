package View;

import Model.Gramatica;
import Model.Produccion;
import control.FileCreator;
import control.Txt_gramatica_parser;
import java.awt.Frame;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.TreeSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

public class main extends javax.swing.JFrame {

    String rutaProyecto;
    Gramatica gramatica;

    public main() {
        this.setResizable(false);
        initComponents();
        rutaProyecto = System.getProperty("user.dir");
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonCargar = new javax.swing.JButton();
        jButtonSimplificar = new javax.swing.JButton();
        jButtonAutomata = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaGramatica = new javax.swing.JTextArea();
        jButtonBorrar = new javax.swing.JButton();
        jButtonGuardar = new javax.swing.JButton();
        jTextFileName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButtonOrdenar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonCargar.setText("Cargar ");
        jButtonCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCargarActionPerformed(evt);
            }
        });

        jButtonSimplificar.setText("Simplificar");
        jButtonSimplificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSimplificarActionPerformed(evt);
            }
        });

        jButtonAutomata.setText("Autómata");
        jButtonAutomata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAutomataActionPerformed(evt);
            }
        });

        jLabel1.setText("Gramática");

        jTextAreaGramatica.setColumns(20);
        jTextAreaGramatica.setRows(5);
        jScrollPane1.setViewportView(jTextAreaGramatica);

        jButtonBorrar.setText("Borrar");
        jButtonBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBorrarActionPerformed(evt);
            }
        });

        jButtonGuardar.setText("Guardar");
        jButtonGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarActionPerformed(evt);
            }
        });

        jTextFileName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFileNameActionPerformed(evt);
            }
        });

        jLabel2.setText("File Name: ");

        jButtonOrdenar.setText("Ordenar");
        jButtonOrdenar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOrdenarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButtonBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButtonOrdenar)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButtonSimplificar)
                                    .addComponent(jButtonAutomata)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jButtonGuardar))
                            .addComponent(jTextFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(jButtonSimplificar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAutomata)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonGuardar)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFileNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFileNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFileNameActionPerformed

    private void jButtonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarActionPerformed

        if (jTextAreaGramatica.getText().compareTo("") != 0) {
            if (jTextFileName.getText().compareTo("") != 0) {
                
                try {
                    actualizarGramatica();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "La gramática ingresada contiene errores sintácticos \n"
                    + "Revise los parámetros de escritura establecidos para una gramática");
                    return;
                }

                // método para crear el archivo
                File archivo = FileCreator.crearArchivoTXT(rutaProyecto, jTextFileName.getText());

                // aqui método para escribir en un archivo de texto
                try {
                    FileCreator.escribirArchivo(archivo, gramatica.getProducciones());
                } catch (IOException ex) {
                    Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(this, "Gramática guardada en\n"
                        + rutaProyecto);
            } else {
                JOptionPane.showMessageDialog(this, "Asígnele un nombre al archivo");
            }
        } else {
            JOptionPane.showMessageDialog(this, "El área de trabajo está vacía");
        }


    }//GEN-LAST:event_jButtonGuardarActionPerformed

    private void jButtonBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBorrarActionPerformed
        if (jTextAreaGramatica.getText().compareTo("") == 0) {
            return;
        }

        String[] options = new String[2];
        options[0] = "Sí";
        options[1] = "No";
        String mensaje = "¿Está seguro que desea borrar\nel espacio de trabajo acutal?";
        int respuesta = JOptionPane.showOptionDialog(this, mensaje, "", 0, JOptionPane.INFORMATION_MESSAGE, null, options, null);
        // respuesta = 1 sí elige NO
        // respuesta = 0 sí elige SÍ
        if (respuesta == 0) {
            jTextAreaGramatica.setText(null);
        }
        
        restaurarValores();
    }//GEN-LAST:event_jButtonBorrarActionPerformed

    private void jButtonSimplificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSimplificarActionPerformed
        try {
            actualizarGramatica();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "La gramática ingresada contiene errores sintácticos \n"
                    + "Revise los parámetros de escritura establecidos para una gramática");
            return;
        }
        if (gramatica.esSimplificable()) {
            TreeSet<String> noTerminalesVivos = gramatica.getNoTerminalesVivos();
            TreeSet<String> noTerminalesMuertos = gramatica.getNoTerminalesMuertos();
            TreeSet<String> noTerminalesInalcanzables = gramatica.getNoTerminalesInalcanzables();
            

            String noTVivos = "";
            Iterator<String> it = noTerminalesVivos.iterator();
            while (it.hasNext()) {
                noTVivos = noTVivos.concat(it.next() + "\n");
            }
            
            
            String noTMuertos = "";
            it = noTerminalesMuertos.iterator();
            while (it.hasNext()) {
                noTMuertos = noTMuertos.concat(it.next() + "\n");
            }
            
            String noTInalcanzables = "";
            it = noTerminalesInalcanzables.iterator();
            while (it.hasNext()) {
                noTInalcanzables = noTInalcanzables.concat(it.next() + "\n");
            }
            
            String total = "No terminales vivos: \n" + noTVivos + 
                    "No terminales muertos: \n" + noTMuertos + 
                    "No terminales inalcanzables: \n" + noTInalcanzables;
            
            JOptionPane.showMessageDialog(this, total);
            
            gramatica = gramatica.simplificar();
            actualizarPantalla();

        } else {
            JOptionPane.showMessageDialog(this, "La gramática no es simplificable");
        }

    }//GEN-LAST:event_jButtonSimplificarActionPerformed

    private void jButtonCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCargarActionPerformed
        if (jTextAreaGramatica.getText().isEmpty()) {
            // crea el JFileChooser
            final JFileChooser fc = new JFileChooser();

            // modifica dónde va a estar el directorio cuando se abra la ventana
            File currentFile = new File(rutaProyecto); // crea un objeto tipo File con el path del proyecto
            fc.setCurrentDirectory(currentFile);

            // filtra los archivos que se muestran en el FileChooser. Sólo muestra archivos de texto
            FileFilter filter = new FileNameExtensionFilter("TXT File", "txt");
            fc.setFileFilter(filter);

            //retorna qué pasó con la ventana del FileChooser
            int returnVal = fc.showOpenDialog(this);

            if (returnVal == JFileChooser.APPROVE_OPTION) { //verifica que se le haya dado click al botón "abrir"
                currentFile = fc.getSelectedFile();
                try {
                    ArrayList<Produccion> producciones = Txt_gramatica_parser.getProducciones(currentFile);
                    gramatica = new Gramatica(producciones);
                    mostarArchivoCargado(currentFile);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(this, "El archivo de texto que intenta cargar no existe o no cumple con la \nforma de una gramática independiente del contexto");
                }
            }
            
            restaurarValores();

        } else {
            JOptionPane.showMessageDialog(rootPane, "Actualmente hay texto en el área de trabajo.\n\n"
                    + "Primero borre el área actual de trabajo y luego intente de nuevo cargar el archivo.");
        }
    }//GEN-LAST:event_jButtonCargarActionPerformed

    private void jButtonAutomataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAutomataActionPerformed
        
        if(gramatica.esEspecial()){
            new AutomataView(gramatica).setVisible(true);
        }else{
            JOptionPane.showMessageDialog(rootPane, "La gramática ingresada no es permitida");
        }
        
        
    }//GEN-LAST:event_jButtonAutomataActionPerformed

    private void btnAutomataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutomataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAutomataActionPerformed

    private void jButtonOrdenarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOrdenarActionPerformed
        actualizarGramatica();
        gramatica = gramatica.organizarGramatica();
        actualizarPantalla();
    }//GEN-LAST:event_jButtonOrdenarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAutomata;
    private javax.swing.JButton jButtonBorrar;
    private javax.swing.JButton jButtonCargar;
    private javax.swing.JButton jButtonGuardar;
    private javax.swing.JButton jButtonOrdenar;
    private javax.swing.JButton jButtonSimplificar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaGramatica;
    private javax.swing.JTextField jTextFileName;
    // End of variables declaration//GEN-END:variables

    public JButton getjButton1() {
        return jButtonCargar;
    }

    public void setjButton1(JButton jButton1) {
        this.jButtonCargar = jButton1;
    }

    public JButton getjButton2() {
        return jButtonSimplificar;
    }

    public void setjButton2(JButton jButton2) {
        this.jButtonSimplificar = jButton2;
    }

    public JButton getjButton3() {
        return jButtonAutomata;
    }

    public void setjButton3(JButton jButton3) {
        this.jButtonAutomata = jButton3;
    }

    public JLabel getjLabel1() {
        return jLabel1;
    }

    public void setjLabel1(JLabel jLabel1) {
        this.jLabel1 = jLabel1;
    }

    public JScrollPane getjScrollPane1() {
        return jScrollPane1;
    }

    public void setjScrollPane1(JScrollPane jScrollPane1) {
        this.jScrollPane1 = jScrollPane1;
    }

    public JTextArea getjTextArea1() {
        return jTextAreaGramatica;
    }

    public void setjTextArea1(JTextArea jTextArea1) {
        this.jTextAreaGramatica = jTextArea1;
    }

    private void mostarArchivoCargado(File archivo) throws FileNotFoundException, IOException {
        ArrayList<String> renglonesTexto;

        FileReader f = new FileReader(archivo);
        renglonesTexto = Txt_gramatica_parser.getRenglones(f);

        jTextAreaGramatica.setText(renglonesTexto.get(0));
        for (int i = 1; i < renglonesTexto.size(); i++) {
            String textoActual = jTextAreaGramatica.getText();
            jTextAreaGramatica.setText(textoActual + "\n" + renglonesTexto.get(i));
        }
    }
    

    private void actualizarGramatica() {
        String texto = jTextAreaGramatica.getText();
        File temporalFile;
        ArrayList<Produccion> producciones = null;
        try {
            temporalFile = File.createTempFile("ficheroTemporal", null);
            temporalFile = FileCreator.escribirArchivo(temporalFile, texto);
            producciones = Txt_gramatica_parser.getProducciones(temporalFile);
            temporalFile.deleteOnExit();
        } catch (Exception ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }

        gramatica = new Gramatica(producciones);
    }

    private void actualizarPantalla() {
        ArrayList<Produccion> producciones = gramatica.getProducciones();

        jTextAreaGramatica.setText(producciones.get(0).getProduccion());
        for (int i = 1; i < producciones.size(); i++) {
            String textoActual = jTextAreaGramatica.getText();
            jTextAreaGramatica.setText(textoActual + "\n" + producciones.get(i).getProduccion());
        }
    }
    
    private void restaurarValores(){
        jTextFileName.setText("");
    }
    
    public Gramatica getGramatica(){
        return gramatica;
    }

}
